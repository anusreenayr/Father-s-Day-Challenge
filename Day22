# 3SUM CLOSEST
from typing import List

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        n = len(nums)
        closest_sum = nums[0] + nums[1] + nums[2]  # Initialize with first triplet
        
        for i in range(n - 2):
            # Skip duplicate elements for the first number
            if i > 0 and nums[i] == nums[i-1]:
                continue
                
            left, right = i + 1, n - 1
            
            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]
                
                # If exact match found, return immediately
                if current_sum == target:
                    return current_sum
                
                # Update closest_sum if current_sum is closer to target
                if abs(current_sum - target) < abs(closest_sum - target):
                    closest_sum = current_sum
                
                # Move pointers based on comparison with target
                if current_sum < target:
                    left += 1
                    # Skip duplicate elements for the left pointer
                    while left < right and nums[left] == nums[left-1]:
                        left += 1
                else:
                    right -= 1
                    # Skip duplicate elements for the right pointer
                    while left < right and nums[right] == nums[right+1]:
                        right -= 1
        
        return closest_sum
