# LONGEST VALID PARENTHESES
class Solution:
    def longestValidParentheses(self, s: str) -> int:
        stack = [-1]
        mx = 0

        for i, p in enumerate(s):
            if p == "(":
                stack.append(i)
            else:
                stack.pop()
                if not stack:
                    stack.append(i)
                else:
                    current_len = i - stack[-1]
                    if current_len > mx:
                        mx = current_len
        return mx

# SEARCH INSERT POSITION
from typing import List

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return left
