# VALID PERFECT SQUARE
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        if num < 1:
            return False
        if num == 1:
            return True 

        left, right = 1, num // 2
        while left <= right:
            mid = left + (right - left) // 2
            square = mid * mid
            if square == num:
                return True
            elif square < num:
                left = mid + 1
            else:
                right = mid - 1
        return False

#Kth smallest element in a sorted matrix
class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        left, right = matrix[0][0], matrix[-1][-1]

        def count_less_or_equal(mid):
            count = 0
            row, col = n - 1, 0

            while row >= 0 and col < n:
                if matrix[row][col] <= mid:
                    count += row + 1
                    col += 1
                else:
                    row -= 1
            return count

        while left < right:
            mid = (left + right) // 2
            count = count_less_or_equal(mid)

            if count < k:
                left = mid + 1
            else:
                right = mid

        return left

